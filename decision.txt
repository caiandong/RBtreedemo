为了说明这种模拟思路非常合适,我可以举个例子.
    我们都知道光的传播速度虽然很快,但也是有限的常量.不考虑微观尺度,
    一般尺度上的距离,光的传播是需要一定时间,也就是说,任何一个事件发生,我们都是后知后觉,
    不可能在事件发生的同时感知到,因此同时是相对的.
    于是代码里的不同时,呈现给用户则可以看成是同时的,所以代码里已经发生的,用户可以认为还未发生.
算法是这样的:一系列模拟数据进行一次计算机真实操作,但在操作中记录每一个步骤,然后把这一系列操作
    放到一个模型中重现,当然,事先要考虑如何表示这些模型.
在实现过程中还有一个麻烦,需要对不同的操作用一种数据表示,语言层面上难以解决,就只能把操作类型
    压缩到一种数据结构中,施以一定的规范约束,以及增加一个辨识字段.

规范:
    1.类内的变量名前缀下划线,首字母小写,随后每个字母大写,例如 _fuckYou
    2.函数内声明的变量同下
    2.函数名和1相同,不过不需要前缀下划线,例如 fuckYou()
    3.其他暂时采用每个首字母大写的形式
对于模拟类场景,首先要明确一个,即如何表示每个需要的元素,一般来说每个最终可视化的元素都必须用某种结构描述出来

手动
1.指定插入（单个或多个）   指定一组数据
2.指定删除（单个或多个）   指定一组数据

5.随机插入（单个或多个）   指定个数
    需要之前插入的随机选取
6.随机删除（单个或多个）   指定个数
    模拟
7.插入删除随机模拟一定次数 随机数范围
10.从文件读取操作
    全局选项
11.速度选择
12.单个节点操作细节显示

qradioButton放到排他QButtonGroup中

一个用来显示的树节点应有的属性
    1.value and color
    2.left right links 即 xleft yleft 与 xright yright
    3.x y 坐标


//一个重要问题
红黑树在调整时,其哨兵节点NIL的父节点在旋转过程中会改变,因此,在树进行一轮清空后,
此时root=NIL,即root.parent不再是NIL.


模拟插入删除
